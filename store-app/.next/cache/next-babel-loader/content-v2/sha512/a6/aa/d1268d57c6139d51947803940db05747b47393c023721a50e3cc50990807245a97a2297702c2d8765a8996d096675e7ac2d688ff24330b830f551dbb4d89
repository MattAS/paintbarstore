{"ast":null,"code":"const {\n  ApolloServer,\n  gql\n} = require('apollo-server');\n\nconst typeDefs = gql`\n    type product {\n        id: ID!,\n        name: String!,\n        price: Int!,\n        quantity: Int!,\n        imgLink: String\n    }\n    type Query {\n        products: [product]\n    }\n`;\nconst products = [{\n  name: 'Paris',\n  price: \"299000\",\n  quantity: 5,\n  imgLink: \"URL\"\n}];\nconst resolvers = {\n  Query: {\n    products: () => products\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nserver.listen().then(({\n  url\n}) => {\n  console.log(`Server ready at ${url}`);\n});","map":{"version":3,"sources":["D:/Paintbar/paintbarStore/store-app/pages/index.js"],"names":["ApolloServer","gql","require","typeDefs","products","name","price","quantity","imgLink","resolvers","Query","server","listen","then","url","console","log"],"mappings":"AAAA,MAAM;AAACA,EAAAA,YAAD;AAAeC,EAAAA;AAAf,IAAsBC,OAAO,CAAC,eAAD,CAAnC;;AAEA,MAAMC,QAAQ,GAAGF,GAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,MAAMG,QAAQ,GAAG,CACb;AACIC,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,KAAK,EAAE,QAFX;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIIC,EAAAA,OAAO,EAAE;AAJb,CADa,CAAjB;AASA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHN,IAAAA,QAAQ,EAAE,MAAMA;AADb;AADO,CAAlB;AAMA,MAAMO,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAACG,EAAAA,QAAD;AAAWM,EAAAA;AAAX,CAAjB,CAAf;AAEAE,MAAM,CAACC,MAAP,GAAgBC,IAAhB,CAAqB,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBF,GAAI,EAAnC;AACH,CAFD","sourcesContent":["const {ApolloServer, gql} = require('apollo-server');\r\n\r\nconst typeDefs = gql `\r\n    type product {\r\n        id: ID!,\r\n        name: String!,\r\n        price: Int!,\r\n        quantity: Int!,\r\n        imgLink: String\r\n    }\r\n    type Query {\r\n        products: [product]\r\n    }\r\n`\r\n\r\nconst products = [\r\n    {\r\n        name: 'Paris',\r\n        price: \"299000\",\r\n        quantity: 5,\r\n        imgLink: \"URL\"\r\n    }\r\n]\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        products: () => products,\r\n    },\r\n};\r\n\r\nconst server = new ApolloServer({typeDefs, resolvers})\r\n\r\nserver.listen().then(({url}) => {\r\n    console.log(`Server ready at ${url}`);\r\n});"]},"metadata":{},"sourceType":"script"}