{"ast":null,"code":"var _taggedTemplateLiteral = require(\"@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    type product {\\n        id: ID!,\\n        name: String!,\\n        price: Int!,\\n        quantity: Int!,\\n        imgLink: String\\n    }\\n    type Query {\\n        products: [product]\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _require = require('apollo-server'),\n    ApolloServer = _require.ApolloServer,\n    gql = _require.gql;\n\nvar typeDefs = gql(_templateObject());\nvar _products = [{\n  name: 'Paris',\n  price: \"299000\",\n  quantity: 5,\n  imgLink: \"URL\"\n}];\nvar resolvers = {\n  Query: {\n    products: function products() {\n      return _products;\n    }\n  }\n};\nvar server = new ApolloServer({\n  typeDefs: typeDefs,\n  resolvers: resolvers\n});\nserver.listen().then(function (_ref) {\n  var url = _ref.url;\n  console.log(\"Server ready at \".concat(url));\n});","map":{"version":3,"sources":["D:/Paintbar/paintbarStore/store-app/pages/index.js"],"names":["require","ApolloServer","gql","typeDefs","products","name","price","quantity","imgLink","resolvers","Query","server","listen","then","url","console","log"],"mappings":";;;;;;;;;;;;eAA4BA,OAAO,CAAC,eAAD,C;IAA5BC,Y,YAAAA,Y;IAAcC,G,YAAAA,G;;AAErB,IAAMC,QAAQ,GAAGD,GAAH,mBAAd;AAaA,IAAME,SAAQ,GAAG,CACb;AACIC,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,KAAK,EAAE,QAFX;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIIC,EAAAA,OAAO,EAAE;AAJb,CADa,CAAjB;AASA,IAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHN,IAAAA,QAAQ,EAAE;AAAA,aAAMA,SAAN;AAAA;AADP;AADO,CAAlB;AAMA,IAAMO,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAACE,EAAAA,QAAQ,EAARA,QAAD;AAAWM,EAAAA,SAAS,EAATA;AAAX,CAAjB,CAAf;AAEAE,MAAM,CAACC,MAAP,GAAgBC,IAAhB,CAAqB,gBAAW;AAAA,MAATC,GAAS,QAATA,GAAS;AAC5BC,EAAAA,OAAO,CAACC,GAAR,2BAA+BF,GAA/B;AACH,CAFD","sourcesContent":["const {ApolloServer, gql} = require('apollo-server');\r\n\r\nconst typeDefs = gql `\r\n    type product {\r\n        id: ID!,\r\n        name: String!,\r\n        price: Int!,\r\n        quantity: Int!,\r\n        imgLink: String\r\n    }\r\n    type Query {\r\n        products: [product]\r\n    }\r\n`\r\n\r\nconst products = [\r\n    {\r\n        name: 'Paris',\r\n        price: \"299000\",\r\n        quantity: 5,\r\n        imgLink: \"URL\"\r\n    }\r\n]\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        products: () => products,\r\n    },\r\n};\r\n\r\nconst server = new ApolloServer({typeDefs, resolvers})\r\n\r\nserver.listen().then(({url}) => {\r\n    console.log(`Server ready at ${url}`);\r\n});"]},"metadata":{},"sourceType":"script"}